%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   statistics.m %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                                   Author Sapounaki, Maria                                                                                   %
%                                                                                                                                                                                                             %
%  This code was written as a part of the master's thesis implementation for the analysis  and plotting of the data                              %
%  obtained by python simulation.                                                                                                                                                           %
%                                                                                                                                                                                                              %
%  It navigates to the Experiments folders and subsequently to the subfolders whose name starts with "Conf"                                    %
%  (denoting each of the four tested arm configurations),  receives the files containing the csv files generated by Python,                  %
%  containing info about qvel, qpos and xpos for the 18 externally applied forces.                                                                                 %
%                                                                                                                                                                                                              %
% It :                                                                                                                                                                                                         % 
%                   a. detects the ph ases of the simulation (Initial, Final, Perturbation)                                                                                   %
%                                                                                                                                                                                                               %
%                   b. plots  (radian velocity of hand), Xpos (Cartesian Coordinates of hand) vs time per each force/ arm configuration       %
%                                                                                                                                                                                                               %
%                   c. extract the Fx,Fy  components per each angle                                                                                                               %
%                                                                                                                                                                                                               %     
%                   d. extract the x,y co-ordinates at the fixed final position and fixed perturbed position                                                        %
%                                                                                                                                                                                                                %
%                   d. calculates the Endpoint stiffness & the corresponding enpoint stiffness ellipsoids                                                          %
%                          (for sake of representation, plots of EPS ellipsoids are divide into two batches with respect to the applied forces)    %
%                                                                                                                                                                                                                %
%                   e. creates csv files containing values of Stiffness Matrices, Characteristics of EPS ellipsoids, and joint angles.               %
%                                                                                                                                                                                                                %
%                                                                                                                                                                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
g;
clear all
clc
close all
mainFolder = '/Users/msapounaki/Dropbox/Studies/Master/TÃ¼bingen/Paper/Experiment_new';        % or ..../Code/Experiments_100ms
subfolders  = dir(mainFolder);
log_file={};

% Loop through each subfolder
for subf_in = 1:numel(subfolders)
    currentSubfolder = fullfile(mainFolder, subfolders(subf_in).name);

    % Check if it's a directory and starts with 'Conf'
    if subfolders(subf_in).isdir && ~startsWith(subfolders(subf_in).name, '.') && startsWith(subfolders(subf_in).name, 'Conf')
       log_file{end+1,1}=subfolders(subf_in).name;
       log_cnt=1;
        % Change directory to the subfolder
        subfolders(subf_in).name
        cd(currentSubfolder);

        %% Explore direcrtory
        % Use the dir function to get the information about files and folders in the directory
        dirInfo = dir(pwd);

        % Initialize an empty cell array to store selected filenames
        qvel_sel  = {};
        qpos_sel = {};
        xpos_sel = {};
        sens_sel = {};

        % Specify the desired starting pattern (modify this as needed)
        qvelPattern  = 'qvel_';
        qposPattern = 'qpos_';
        xposPattern = 'xpos_';
        sensPattern = 'sensors';


        % Loop through the directory information and extract filenames with the desired starting pattern
        for i = 1:numel(dirInfo)

            % Skip directories (including '.' and '..') and hidden files starting with '.'
            if dirInfo(i).isdir || strncmp(dirInfo(i).name, '.', 1)
                continue;
            end

            % Find qvel_xx files
            if startsWith(dirInfo(i).name, qvelPattern, 'IgnoreCase', true)
                qvel_sel{end + 1} = dirInfo(i).name;
            end

            % Find qpos_xx files
            if startsWith(dirInfo(i).name, qposPattern, 'IgnoreCase', true)
                qpos_sel{end + 1} = dirInfo(i).name;
            end

            % Find xpos_xx files
            if startsWith(dirInfo(i).name, xposPattern, 'IgnoreCase', true)
                xpos_sel{end + 1} = dirInfo(i).name;
            end

            % Find sensor files
            if startsWith(dirInfo(i).name, sensPattern, 'IgnoreCase', true)
                sens_sel{end + 1} = dirInfo(i).name;
            end

        end


        %% Define forces of the two experimental batches

        % for Newtcnt=1:2
        StifMat = cell(0, 2);
        
        
        RMSE_noInterMat = cell(0, 2);
        RMSEsqr_nointer = cell(0, 2);

        fig_SE_B1 = figure('Name', 'Stiffness Ellipsoid N Batch 1'  ,'Position', [0 0 9000 9000],'NumberTitle', 'off','color','w');
        fig_SE_B2 = figure('Name', 'Stiffness Ellipsoid N Batch 2'  ,'Position', [0 0 9000 9000],'NumberTitle', 'off','color','w');

        fig_XY_B1 = figure('Name', 'X vs Y N Batch 1'  ,'Position', [0 0 9000 9000],'NumberTitle', 'off','color','w');
        fig_XY_B2 = figure('Name', 'X vs Y Batch 2'  ,'Position', [0 0 9000 9000],'NumberTitle', 'off','color','w');

        max_axis1 = 0;
        max_axis2 = 0;
        max_axis3= 0;
        max_axis4 = 0;
        legend_entries_1 = {};
        legend_entries_2 = {};
        legend_entries_3 = {};
        legend_entries_4 = {};

        legend_entries_XY1 = {};
        legend_entries_XY2 = {};
        legend_entries_XY3 = {};
        legend_entries_XY4 = {};
        % 
   
        Newtons1 = { '0.50',  '0.75',  '1.00',  '1.25',' 1.50'};
        Newtons2 = { '5.00',  '7.50',  '10.00', '12.50',' 15.00'};

        Newtons3 = { '1.75',  '2.0', ' 2.5', ' 3.0'};
        Newtons4 = { '17.5', '20',  '25', '30'};
        flag_approp=true;

      for file_id= 1:length(qpos_sel)

            qvel_dat   = qvel_sel{file_id};
            qpos_dat  = qpos_sel{file_id}; 
            xpos_dat  = xpos_sel{file_id};
            sens_dat = sens_sel{file_id};

            Initial           = 1;
            Force_end  = 1;
            Forc_start   = 1;

            T_qvel   = readtable(qvel_dat);
            T_qpos  = readtable(qpos_dat); 
            T_xpos  = readtable(xpos_dat);
            T_sens  = readtable(sens_dat);

            
            % VariableNames_pos = T_qpos.Properties.VariableNames;

            Arr_qvel   = table2array(T_qvel);
            Arr_qpos  = table2array(T_qpos);
            Arr_xpos  = table2array(T_xpos);
            Arr_sens  = table2array(T_sens);



           %% Check joint limits
            % Find rows where values in columns exceed 5
            exceedThreshold = any(Arr_sens(:, 2:5) > 8, 2);
            selected_indices = find(exceedThreshold);
            % Get the column names that exceed the threshold
            rowNumber=[];
         

            [m_qpos,n_qpos] = size(Arr_qpos);
            [m_qvel,n_qvel]   = size(Arr_qpos); %


            %% Get the states p (0:initial, 1:unperturbed, 2:perturbed)

            for i = 3:length(Arr_qpos)

                % Check for a switch (transition) in the second column
                if Arr_qpos(i, 7) ~= Arr_qpos(i-1, 7)

                    % If a switch is found, add the index to the 'switch_indices' array
                    if Arr_qpos(i, 7) == 0
                        Initial= [Initial, i];
                    elseif Arr_qpos(i, 7) == 1
                        Force_end= [Force_end, i];
                    elseif Arr_qpos(i, 7) == 2
                        Forc_start= [Forc_start, i];
                    end

                end

            end

            %% Plots
            % Qvel plots
            fig_qvel  = figure('Name',qvel_dat,'Position', [0 0 1500 1500],'NumberTitle', 'off','color','w');
            h_qvel    = plot(Arr_qvel(2:m_qvel,1),Arr_qvel(2:m_qvel,3),'k', 'LineWidth', 2);
            hold on

            title('Radian Velocity of hand')
            h1 = xline(Arr_qvel(Initial(1:end),1),'g', 'LineWidth', 2);
            h2 = xline(Arr_qvel(Force_end(1:end),1),'b', 'LineWidth', 2);
            h3 = xline(Arr_qvel(Forc_start(2:end),1),'r', 'LineWidth', 2);

            xlabel('Time [in s]', 'FontSize', 44)
            ylabel('Radian Velocity [rad/sec]', 'FontSize', 44)
            set(gca, 'FontSize', 36);

            legend([h_qvel(1) h1(1) h2(1) h3(1)],{'Signal','Initial','Final', 'Force Applied'},'FontSize', 34,'location','southeastoutside');
            hold off

            % Qpos plots
            fig_qpos = figure('Name',qpos_dat,'Position', [0 0 1500 1500],'NumberTitle', 'off','Visible', 'off','color','w');
            h_qpos = plot(Arr_qpos(2:m_qpos,1),Arr_qpos(2:m_qpos,6),'k','LineWidth', 2);
            hold on

            h1 = xline(Arr_qpos(Initial(:),1),'g', 'LineWidth', 2);
            h2 = xline(Arr_qpos(Force_end(1:end),1),'b', 'LineWidth', 2);
            h3 = xline(Arr_qpos(Forc_start(2:end),1),'r', 'LineWidth', 2);

            legend([h_qpos(1) h1(1) h2(1) h3(1)],{'Signal','Initial','Final', 'Force Applied'},'FontSize', 34,'location','southeastoutside');
            xlabel('Time [in s]', 'FontSize', 44)
            title('Relative position of hand')
            ax_f = gca;
            ax_f.XAxis.FontSize=36;
            ax_f.YAxis.FontSize = 36;

            hold off

            % Xpos plots
            fig_xpos  = figure('Name',xpos_dat,'Position', [0 0 1500 1500],'NumberTitle', 'off','Visible', 'off','color','w');
            subplot(2,1,1)
            h_xpos_x  = plot(Arr_xpos(2:m_qvel,1),Arr_xpos(2:m_qvel,2),'k', 'LineWidth', 2);

            set(gca, 'FontSize', 36);
            title('Cartesian Coordinates of hand', 'FontSize', 50)
            xlabel('Time [in s]', 'FontSize', 44)
            ylabel(sprintf('Cartesian Position \nin x [in m]'), 'FontSize', 44)

            h1 = xline(Arr_xpos(Initial(:),1),'g', 'LineWidth', 2);
            h2 = xline(Arr_xpos(Force_end(1:end),1),'b', 'LineWidth', 2);
            h3 = xline(Arr_xpos(Forc_start(1:end),1),'r', 'LineWidth', 2);

            legend([h_xpos_x(1) h1(1) h2(1) h3(1)],{'Signal','Initial','Final', 'Force Applied'},'FontSize', 34,'location','southeastoutside');

            xlim(gca, [min(Arr_xpos(2:m_qvel,1)), max(Arr_xpos(2:m_qvel,1)-1)]);
            ylim(gca,[min(Arr_xpos(2:m_qvel,2)), max(Arr_xpos(2:m_qvel,2))]);

            subplot(2,1,2)
            h_xpos_y  = plot(Arr_xpos(2:m_qvel,1),Arr_xpos(2:m_qvel,3),'k', 'LineWidth', 2);

            set(gca, 'FontSize', 36);
            xlabel('Time [in s]', 'FontSize', 44)
            ylabel(sprintf('Cartesian Position \nin y [in m]'), 'FontSize', 44)

            h1 = xline(Arr_xpos(Initial(:),1),'g', 'LineWidth', 2);
            h2 = xline(Arr_xpos(Force_end(1:end),1),'b', 'LineWidth', 2);
            h3 = xline(Arr_xpos(Forc_start(1:end),1),'r', 'LineWidth', 2);

            xlim(gca, [min(Arr_xpos(2:m_qvel,1)), max(Arr_xpos(2:m_qvel,1)-1)]);
            ylim(gca, [min(Arr_xpos(2:m_qvel,3)), max(Arr_xpos(2:m_qvel,3))]);

            legend([h_xpos_y(1) h1(1) h2(1) h3(1)],{'Signal','Initial','Final', 'Force Applied'},'FontSize', 34,'location','southeastoutside');
            hold off

            %% Extract the Fx,Fy  components per each angle
            Fx=[]; Fy=[];
            f=1;

            %% Extract the x,y co-ordinates at the fixed final position and fixed perturbed position
            cnt_in   = 1;   cnt_f     = 1;
            disx_in = [];   disy_in  = [];
            disx_f   = [];   disy_f    = [];
            theta    = [];   times_f  = [];    times_in = [];

            flag1 = true;
            flag2 = true;
            flag3 = false;

            for i=1:length(Arr_qpos)-1
                if ~ismember(i, selected_indices)
                    
                    % disp('s')
                  if Arr_qpos(i,7)==1 && Arr_qpos(i+1,7)==2  
                      if sum(all(Arr_sens(i+1:i+899,2:5)<8,2) )==899 % Force starts
                        disp('Starts')
                        Arr_sens(i+1,1)
                        disx_in(cnt_in)   = Arr_xpos(i+1,2);
                        disy_in(cnt_in)   = Arr_xpos(i+1,3);
                        times_in(cnt_in) = Arr_xpos(i+1,1);
                        theta(cnt_in)      = Arr_xpos(i+1,8);
                        flag3 = true;
                      else 
                          lig_mes = sprintf('Case of %s N at %d deg excluded',xpos_dat(6:end-4),Arr_qpos(i+1,8) );
                          log_cnt = log_cnt+1;
                          log_file{end,log_cnt}=lig_mes  ; 
                          continue
                      
                      end
    
                        if  flag1
    
                            init_Shoulderang = Arr_qpos(i+1,3);
                            init_Elbowang      = Arr_qpos(i+1,5);
                            flag1 = false;
    
                        end
    
                        cnt_in=cnt_in+1;
    
                    end

                  if (Arr_qpos(i,7)==2 && Arr_qpos(i+1,7)~=2) && flag3==true

                        Fx(f) = Arr_qpos(i,10);
                        Fy(f) = Arr_qpos(i,11);
                        f=f+1;
                        
                 end
    
    
                 if ((Arr_qpos(i,7)==2 && Arr_qpos(i+1,7)==0) || (Arr_qpos(i,7)==2 && Arr_qpos(i+1,7)==1)) && flag3==true  % force stops
                        disp('Stops')
                        Arr_sens(i+1,1)
                        disx_f(cnt_f)   = Arr_xpos(i+1,2);
                        disy_f(cnt_f)   = Arr_xpos(i+1,3);
                        times_f(cnt_f) = Arr_xpos(i+1,1);
                        flag3 = false;

    
                        if  flag2
    
                            final_Shoulderang = Arr_qpos(i+1,3);
                            final_Elbowang     = Arr_qpos(i+1,5);
                            flag2 = false ;
    
                        end
    
                        cnt_f = cnt_f+1;
                 end

               end
            end
            
            F_vec = [Fx;Fy];
            dx = disx_f-disx_in;
            dy = disy_f-disy_in;

            dxy_vec = [dx;dy];

            %% Endpoint Stiffness

            K_endps_mdl_nointercept = zeros(size(F_vec, 1), size(dxy_vec, 1));

            try 
                for i = 1:size(F_vec, 1)
                    
                    mdl = fitlm(dxy_vec.', F_vec(i, :).');
                    mdl_nointercept = fitlm(dxy_vec.', F_vec(i, :).','Intercept',false,'RobustOpts','on');
                    K_endps_mdl_nointercept(i, :) = mdl_nointercept.Coefficients.Estimate(1:end).';
                    RMSE_nointer(i) = mdl_nointercept.RMSE;
                    RMSEsqr_nointer(i) = mdl_nointercept.mdl_nointercept.Rsquared;
                end
    
                stringsColumn = cell(17, 1);
                valuesColumn = cell(17, 1);
                for i = 1:size(myCell, 1)
                stringsColumn{i} = myCell{i, 1};
                d=struct2cell(myCell{i, 2});
                valuesColumn{i}=[d(:,:,1); d(:,:,2)]';
                end

                K_endps = K_endps_mdl_nointercept;

               if isempty(K_endps)
                         flag_approp=false;
                         log_info=sprintf('No appropriate case in %s N csv file',xpos_dat(6:end-4));
                         log_cnt = log_cnt+1;
                         log_file{end,log_cnt}=log_info;
                         continue
                end

                t       = linspace(0, 2*pi, 500);
                F_st = K_endps*[cos(t);sin(t)];
              
                RMSE_mat = {xpos_dat(6:end-4), RMSE_nointer};
                RMSE_noInterMat(end + 1, :) = RMSE_mat;
    
                StiffnessMatr         = {xpos_dat(6:end-4), K_endps};
                StifMat(end + 1, :) = StiffnessMatr;
    
                % Characteristics
                [U,S,V] = svd(K_endps);
    
                phi = atan(U(2,1)/U(1,1));                                      % Major axis orientation
    
                amin  = sqrt(min(eig(K_endps*K_endps)));
                amax = sqrt(max(eig(K_endps*K_endps)));
                s        = amin/amax ;                                              % Shape
    
                A = pi*amin*amax;                                                  % Area
    
                Charact(file_id,:)   = [phi, s, A];                               % Summaze the info
                CharRows(file_id) = [str2num(xpos_dat(6:end-4))];
    
                
                %  Create folder to save figures
                if file_id==1
    
                    mkdir('Figures')
    
                end
    
                %%  Plots
                % Fx, Fy in time
                fig_FTime = figure('Name',strcat('Fx-Fy In Time for   ',xpos_dat(5:end-4),' N'),'Position', [0 0 1500 1500],'NumberTitle', 'off','Visible', 'off','color','w');
                r = plot(Arr_xpos(:,1),Arr_xpos(:,end-1),'o-', 'LineWidth', 2.5);
                hold on
                
    
                r1 = plot(Arr_xpos(:,1),Arr_xpos(:,end),'LineWidth', 2.5);
                hold off
                axis square
    
                title('Fx(t) Fy(t)', 'FontSize', 50)
                legend('Fx','Fy','FontSize', 34)
                xlabel('Time [in s]', 'FontSize', 44)
                ylabel('Force [in N]', 'FontSize', 44)
                set(gca, 'FontSize', 36);
    
                % Îx, Îy in time
                fig_DispTime = figure('Name',strcat('Îx-Îy In Time for   ',xpos_dat(5:end-4),' N'),'Position', [0 0 1500 1500],'NumberTitle', 'off','Visible', 'off','color','w');
                subplot(2,1,1)
                plot(times_in,dx,'o-','LineWidth', 2.5);
                axis square
    
                title('Îx(t)', 'FontSize', 50)
                xlabel('Time [in s]')
                ylabel('Îx [in m]')
                xlabel('Time [in s]', 'FontSize', 44)
                ylabel('Îy [in m]', 'FontSize', 44)
                set(gca, 'FontSize', 36);
    
    
                subplot(2,1,2)
                plot(times_in,dy,'o-','LineWidth', 2.5);
                axis square
                title('Îy(t)', 'FontSize', 50)
                xlabel('Time [in s]', 'FontSize', 44)
                ylabel('Îy [in m]', 'FontSize', 44)
                set(gca, 'FontSize', 36);
    
                hold off
    
                % Fx, Fy vs dx, dy
                fig_ForceDisp = figure('Name',strcat('Fx vs dx & Fx vs dy for   ',xpos_dat(5:end-4),' N'),'Position', [0 0 1500 1500],'NumberTitle', 'off','Visible', 'off','color','w');
                subplot(2,1,1)
                plot(dx,F_vec(1,:),'o-','LineWidth', 2.5);
    
                title('Force and displacement in X', 'FontSize', 50)
                xlabel('displacement in X', 'FontSize', 44)
                ylabel('Fx', 'FontSize', 44)
                axis square
                set(gca, 'FontSize', 36);
    
                subplot(2,1,2)
                plot(dy,F_vec(2,:),'o-','LineWidth', 2.5);
    
                title('Force and displacement in Y', 'FontSize', 50)
                xlabel('displacement in Y', 'FontSize', 44)
                ylabel('Fy', 'FontSize', 44)
                axis square
                set(gca, 'FontSize', 36);
    
                hold off
                
                if file_id==7  % Plot specifically Force vs Displacment for file_id=forcce_level (e.g. 0.5N=1, 0.75=2N... Here, it is 7N.
                        
                        XY2N  = figure('Name', strcat('X vs Y at', xpos_dat(6:end-4),'N')  ,'Position', [0 0 1500 1500],'NumberTitle', 'off','color','w');
                        XY_02 = plot(disx_f,disy_f,'-o','LineWidth', 3);
                       
                        title('X vs Y','FontSize', 50)
                        xlabel('X [in m]', 'FontSize', 44) 
                        ylabel('Y [in m]', 'FontSize', 44)
                        
                        ax = gca;
                        ax.XAxis.FontSize = 36;
                        ax.YAxis.FontSize = 36;
    
                        axis square
                        legend('02 N','Endpoint Position')
                        saveas(XY2N,strcat(xpos_dat(6:end-4),'N',' X vs Y_',subfolders(subf_in).name(6:8),'.fig') )
                        saveas(XY2N,strcat(xpos_dat(6:end-4),'N',' X vs Y_',subfolders(subf_in).name(6:8),'.png') )
    
    
                        SE2N  = figure('Name',strcat('X vs Y at', xpos_dat(6:end-4),'N')  ,'Position', [0 0 9000 9000],'NumberTitle', 'off','color','w');
    
                        % Stiffness Ellipsoids
                        SE_21 = plot(F_st(1,:),F_st(2,:),'-','LineWidth', 3);
    
    
                        title('Stiffness Elliplsoid', 'FontSize', 50)
                        xlabel('Îx [in N/m]', 'FontSize', 44)
                        ylabel('Îy [in N/m]', 'FontSize', 44)
                        
                        ax = gca;
                        ax.XAxis.FontSize = 36;
                        ax.YAxis.FontSize = 36;
                        axis square
    
                        legend('02 N','Endpoint Position')
                        saveas(SE2N,strcat(xpos_dat(6:end-4),'N',' SE_',subfolders(subf_in).name(6:8),'.fig') )
                        saveas(SE2N,strcat(xpos_dat(6:end-4),'N',' SE_',subfolders(subf_in).name(6:8),'.png') )
    
                       max_axis = max(F_st,[],"all");
                       axis([-max_axis max_axis -max_axis max_axis])
    
    
                end
    
    
                %% X vs Y  - Batch1

                figure(fig_XY_B1);
                NewtonXY12 = gcf;
    
                % Subplot for Newtons1 elements
                subplot(1, 2, 1);
                hold on;
    
    
                for n1 = 1:numel(Newtons1)
                    element = Newtons1{n1};
                    if str2double(xpos_dat(6:end-4))==str2double(element)
    
                       % X vs Y
                        XY_21 = plot(disx_f,disy_f,'-o','LineWidth', 3);
                        title('X vs Y','FontSize', 50)
                        xlabel('X [in m]', 'FontSize', 44)
                        ylabel('Y [in m]', 'FontSize', 44)
                        
                        ax = gca;
                        ax.XAxis.FontSize = 36;
                        ax.YAxis.FontSize = 36;
                        axis square
                        legend_entries_XY1{end+1} = [ strcat(xpos_dat(6:end-4),' N')];
    
                    end
    
                end
                hold off
    
    
                % Subplot for Newtons2 elements
                subplot(1, 2, 2);
    
                hold on;
    
                for n2 = 1:numel(Newtons2)
                    element = Newtons2{n2};
    
                    if str2double(xpos_dat(6:end-4))==str2double(element)
                        
                        XY_22 = plot(disx_f,disy_f,'-o','LineWidth', 3,'DisplayName', strcat(xpos_dat(6:end-4),' N') );
                        title('X vs Y','FontSize', 50)
                        xlabel('X [in m]', 'FontSize', 44)
                        ylabel('Y [in m]', 'FontSize', 44)
                        ax = gca;
                        ax.XAxis.FontSize = 36;
                        ax.YAxis.FontSize = 36;
                        axis square
                        legend_entries_XY2{end+1} = [ strcat(xpos_dat(6:end-4),' N')];
    
                    end
    
                end
    
                hold off;
    
    
                %% X vs Y  - Second Batch
    
                figure(fig_XY_B2);
                NewtonXY34 = gcf;
    
                % Subplot for Newtons3 elements
                subplot(1, 2, 1);
                hold on;
    
    
                for n3 = 1:numel(Newtons3)
                    element = Newtons3{n3};
    
                    if str2double(xpos_dat(6:end-4))==str2double(element)
    
                        % X vs Y
                        XY_21 = plot(disx_f,disy_f,'-o','LineWidth', 3,'DisplayName', strcat(xpos_dat(6:end-4),' N') );
                       
                        title('X vs Y','FontSize', 50)
                        xlabel('X [in m]', 'FontSize', 44)
                        ylabel('Y [in m]', 'FontSize', 44)
    
                        legend_entries_XY3{end+1} = [ strcat(xpos_dat(6:end-4),' N')];
                        ax = gca;
                        ax.XAxis.FontSize = 36;
                        ax.YAxis.FontSize = 36;
                        axis squar
    
                    end
    
                end
                hold off
    
                % Subplot for Newtons4 elements
                subplot(1, 2, 2);
                hold on;
    
                for n4 = 1:numel(Newtons4)
                    element = Newtons4{n4};
    
                    if str2double(xpos_dat(6:end-4))==str2double(element)
                        
                        XY_22 = plot(disx_f,disy_f,'-o','LineWidth', 3,'DisplayName', strcat(xpos_dat(6:end-4),' N') );
                       
                        title('X vs Y','FontSize', 50)
                        xlabel('X [in m]', 'FontSize', 44)
                        ylabel('Y [in m]', 'FontSize', 44)
    
                        ax=gca;
                        ax.XAxis.FontSize = 36;
                        ax.YAxis.FontSize = 36;
                        axis square
                        legend_entries_XY4{end+1} = [ strcat(xpos_dat(6:end-4),' N')];
    
                    end
    
                end
    
                hold off;
    
    
    
                %% Stiffness Ellipsoids - Batch1
    
                figure(fig_SE_B1);
                Newton12 = gcf;
    
                % Subplot for Newtons1 elements
                subplot(1, 2, 1);
                hold on;
    
    
                for n1 = 1:numel(Newtons1)
                    element = Newtons1{n1};
                    if str2double(xpos_dat(6:end-4))==str2double(element)
    
                        % Stiffness Ellipsoids
                        SE_21 = plot(F_st(1,:),F_st(2,:),'-','LineWidth', 3);
    
                        title('Stiffness Elliplsoid', 'FontSize', 50)
                        xlabel('Îx [in N/m]', 'FontSize', 44)
                        ylabel('Îy [in N/m]', 'FontSize', 44)
                        
                        ax = gca;
                        ax.XAxis.FontSize = 36;
                        ax.YAxis.FontSize = 36;
                        axis square
                        legend_entries_1{end+1} = [ strcat(xpos_dat(6:end-4),' N')];
    
                        if max_axis1<max(F_st,[],"all")
                            max_axis1 = max(F_st,[],"all");
                            axis([-max_axis1 max_axis1 -max_axis1 max_axis1])
                        end
    
                    end
    
                end
                hold off
    
    
                % Subplot for Newtons2 elements
                subplot(1, 2, 2);
    
                hold on;
    
                for n2 = 1:numel(Newtons2)
                    element = Newtons2{n2};
    
                    if str2double(xpos_dat(6:end-4))==str2double(element)
                        
                        SE_22 = plot(F_st(1,:),F_st(2,:),'-','LineWidth', 3,'DisplayName', strcat(xpos_dat(6:end-4),' N') );
                       
                        title('Stiffness Elliplsoid', 'FontSize', 50)
                        xlabel('Îx [in N/m]', 'FontSize', 44)
                        ylabel('Îy [in N/m]', 'FontSize', 44)
                        ax = gca;
                        ax.XAxis.FontSize = 36;
                        ax.YAxis.FontSize = 36;
                        axis square
                        legend_entries_2{end+1} = [ strcat(xpos_dat(6:end-4),' N')];
    
                        if max_axis2<max(F_st,[],"all")
                            max_axis2=max(F_st,[],"all");
                            axis([-max_axis2 max_axis2 -max_axis2 max_axis2])
                        end
    
                    end
    
                end
    
                hold off;
    
    
                %% Stiffness Ellipsoids - Second Batch
    
                figure(fig_SE_B2);
                Newton34 = gcf;
    
                % Subplot for Newtons3 elements
                subplot(1, 2, 1);
                hold on;
    
    
                for n3 = 1:numel(Newtons3)
                    element = Newtons3{n3};
    
                    if str2double(xpos_dat(6:end-4))==str2double(element)
    
                        % Stiffness Ellipsoids
                        SE_21 = plot(F_st(1,:),F_st(2,:),'-','LineWidth', 3);
    
                        title('Stiffness Elliplsoid', 'FontSize', 50)
                        xlabel('Îx [in N/m]', 'FontSize', 44)
                        ylabel('Îy [in N/m]', 'FontSize', 44)
                        axis square
                        legend_entries_3{end+1} = [ strcat(xpos_dat(6:end-4),' N')];
                        ax = gca;
                        ax.XAxis.FontSize = 36;
                        ax.YAxis.FontSize = 36;
    
                        % plot(disx_in(1),eeee(1),'mo ')
                        if max_axis3<max(F_st,[],"all")
                            max_axis3 = max(F_st,[],"all");
                            axis([-max_axis3 max_axis3 -max_axis3 max_axis3])
                        end
    
                    end
    
                end
                hold off
    
                % Subplot for Newtons4 elements
                subplot(1, 2, 2);
                hold on;
    
                for n4 = 1:numel(Newtons4)
                    element = Newtons4{n4};
    
                    if str2double(xpos_dat(6:end-4))==str2double(element)
                        
                        SE_22 = plot(F_st(1,:),F_st(2,:),'-','LineWidth', 3,'DisplayName', strcat(xpos_dat(6:end-4),' N') );
    
                        title('Stiffness Elliplsoid', 'FontSize', 50)
                        xlabel('Îx [in N/m]', 'FontSize', 44)
                        ylabel('Îy [in N/m]', 'FontSize', 44)
                        ax=gca;
                        axis square
                        ax.XAxis.FontSize = 36;
                        ax.YAxis.FontSize = 36;
                        legend_entries_4{end+1} = [ strcat(xpos_dat(6:end-4),' N')];
    
                        if max_axis4<max(F_st,[],"all")
                            max_axis4=max(F_st,[],"all");
                            axis([-max_axis4 max_axis4 -max_axis4 max_axis4])
                        end
    
                    end
    
                end
    
                hold off;

            catch exception
                  disp(exception.message);  % Display the error message
            end

            %% Saves
            saveas(fig_qpos,strcat('Qpos',qvel_dat(6:end-4),'.png'))
            saveas(fig_qvel,strcat('Velocity vs Time',qpos_dat(6:end-4),'.png'))
            saveas(fig_xpos,strcat('Position vs Time',xpos_dat(6:end-4),'.png'))
            saveas(fig_FTime,strcat('Fx-Fy_',qvel_dat(6:end-4),'N.png'))
            saveas(fig_DispTime,strcat('Îx-Îy_',qvel_dat(6:end-4),'N.png'))
            saveas(fig_ForceDisp,strcat('FxDx_',qvel_dat(6:end-4),'N.png'))
            saveas(fig_ForceDisp,strcat('FxDx_',qvel_dat(6:end-4),'N.fig'))
            
            % saveas(fig_XY,strcat('X-Y'  ,qvel_dat(6:end-4),'N.png') )
           
            cd(currentSubfolder)

        end

        %% Stiffness Ellipsoids - figures modifcation
        % Stiffness Ellipsoids - First Batch, legend addition
        if flag_approp==true
            figure(fig_SE_B1);
            upperAxes_N12 = Newton12.Children(1);
            lowerAxes_N12  = Newton12.Children(2);
    
            hold(lowerAxes_N12, 'on');
            plot(lowerAxes_N12,disx_in(1),disy_in(1),'mo','LineWidth', 3);
            legend(lowerAxes_N12,[legend_entries_1  , 'Endpoint Position'],'FontSize', 34,'location','southeastoutside');
            hold(lowerAxes_N12, 'off');
    
            hold(upperAxes_N12, 'on');
            plot(upperAxes_N12,disx_in(1),disy_in(1),'mo','LineWidth', 3);
            legend(upperAxes_N12,[legend_entries_2 , 'Endpoint Position'],'FontSize', 34,'location','southeastoutside');
            hold(upperAxes_N12, 'off');
    
    
           % Stiffness Ellipsoids - Second Batch, legend addition
            figure(fig_SE_B2);
            upperAxes_N34 = Newton34.Children(1);
            lowerAxes_N34  = Newton34.Children(2);
    
            hold(lowerAxes_N34, 'on');
            plot(lowerAxes_N34,disx_in(1),disy_in(1),'mo','LineWidth', 3);
            legend(lowerAxes_N34,[legend_entries_3  , 'Endpoint Position'],'FontSize', 34,'location','southeastoutside');
            hold(lowerAxes_N34, 'off');
    
            hold(upperAxes_N34, 'on');
            plot(upperAxes_N34,disx_in(1),disy_in(1),'mo','LineWidth', 3);
            legend(upperAxes_N34,[legend_entries_4  , 'Endpoint Position'],'FontSize', 34,'location','southeastoutside');
            hold(upperAxes_N34, 'off')
        
            saveas(fig_SE_B1,strcat('Stiffness EllipsoidsB1_',subfolders(subf_in).name(6:8),'.png') )
            saveas(fig_SE_B2,strcat('Stiffness EllipsoidsB2_',subfolders(subf_in).name(6:8),'.png') )
            saveas(fig_SE_B1,strcat('Stiffness EllipsoidsB1_',subfolders(subf_in).name(6:8),'.fig') )
            saveas(fig_SE_B2,strcat('Stiffness EllipsoidsB2_',subfolders(subf_in).name(6:8),'.fig') )
 

            %% X vs Y - figures modifcation
            % X vs Y - First Batch, legend addition
            figure(fig_XY_B1);
            upperAxes_N12 = NewtonXY12.Children(1);
            lowerAxes_N12  = NewtonXY12.Children(2);
    
            hold(lowerAxes_N12, 'on');
            plot(lowerAxes_N12,disx_in(1),disy_in(1),'mo','LineWidth', 3);
            legend(lowerAxes_N12,[legend_entries_XY1  , 'Endpoint Position'],'FontSize', 34,'location','southeastoutside');
            hold(lowerAxes_N12, 'off');
    
            hold(upperAxes_N12, 'on');
            plot(upperAxes_N12,disx_in(1),disy_in(1),'mo','LineWidth', 3);
            legend(upperAxes_N12,[legend_entries_XY2 , 'Endpoint Position'],'FontSize', 34,'location','southeastoutside');
            hold(upperAxes_N12, 'off');


           % X vs Y - Second Batch, legend addition
            figure(fig_XY_B2);
            upperAxes_N34 = NewtonXY34.Children(1);
            lowerAxes_N34  = NewtonXY34.Children(2);
    
            hold(lowerAxes_N34, 'on');
            plot(lowerAxes_N34,disx_in(1),disy_in(1),'mo','LineWidth', 3);
            legend(lowerAxes_N34,[legend_entries_XY3  , 'Endpoint Position'],'FontSize', 34,'location','southeastoutside');
            hold(lowerAxes_N34, 'off');

            hold(upperAxes_N34, 'on');
            plot(upperAxes_N34,disx_in(1),disy_in(1),'mo','LineWidth', 3);
            legend(upperAxes_N34,[legend_entries_XY4  , 'Endpoint Position'],'FontSize', 34,'location','southeastoutside');
            hold(upperAxes_N34, 'off')
    
            saveas(fig_XY_B1,strcat(' X vs Y B1_',subfolders(subf_in).name(6:8),'.png') )
            saveas(fig_XY_B2,strcat(' X vs Y B2_',subfolders(subf_in).name(6:8),'.png') )
            saveas(fig_XY_B1,strcat(' X vs Y B1_',subfolders(subf_in).name(6:8),'.fig') )
            saveas(fig_XY_B2,strcat(' X vs Y B2_',subfolders(subf_in).name(6:8),'.fig') )
       


         %%  Characteristics csv
              CharNames = {'Force', 'Orientation', 'Shape', 'Area'};                                          % Define column names for Characteristic.csv
              CharTable = array2table([CharRows',Charact], 'VariableNames', CharNames);
              CharTable = sortrows(CharTable,1);
              writetable(CharTable, strcat('Characteristics_',subfolders(subf_in).name(6:8),'.csv'));

         %%  Join angles csv
              AngleNames = {'Shoulder_init', 'Shoulder_final', 'Angle_init', 'Angle_final','Difference Shoulder','Difference Elbow' };
              AngleTable   = array2table([180/pi*init_Shoulderang,180/pi*final_Shoulderang,180/pi*init_Elbowang,180/pi*final_Elbowang,180/pi*(final_Shoulderang-init_Shoulderang), 180/pi*(final_Elbowang-init_Elbowang)], ...
            'VariableNames', AngleNames);
              writetable(AngleTable, strcat('AngleTable_',subfolders(subf_in).name(6:end),'.csv'));

        %% Stiffness matrices csv
               writecell(StifMat, strcat('StifMatrices',subfolders(subf_in).name(6:end),'.csv'));
               writecell(RMSE_noInterMat, strcat('RMSE',subfolders(subf_in).name(6:end),'.csv'));

               RMSsqr=[stringsColumn, valuesColumn];
               myTable = cell2table(RMSsqr);
               writetable(myTable, strcat('RMSEsqr',subfolders(subf_in).name(6:end),'.csv'));

              movefile('*.png','Figures')
        end


        clearvars -except qvel_sel qpos_sel xpos_sel subfolders mainFolder currentSubfolder subf_in log_file
        clc
        close all

    end   % end of arm configuration

    writecell(log_file,'Log.csv')
    cd(mainFolder);

end